============================= test session starts ==============================
platform linux -- Python 3.10.18, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python3
cachedir: .pytest_cache
metadata: {'Python': '3.10.18', 'Platform': 'Linux-6.8.0-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.5.0'}, 'Plugins': {'anyio': '4.9.0', 'cov': '6.1.1', 'json-report': '1.5.0', 'metadata': '3.1.1'}}
rootdir: /app
plugins: anyio-4.9.0, cov-6.1.1, json-report-1.5.0, metadata-3.1.1
collecting ... collected 65 items

reporter/tests/test_book_closing.py::test_close_and_reopen_flow PASSED   [  1%]
reporter/tests/test_book_closing.py::test_add_transaction_to_closed_month PASSED [  3%]
reporter/tests/test_book_closing.py::test_delete_transaction_from_closed_month PASSED [  4%]
reporter/tests/test_database.py::test_create_database_tables PASSED      [  6%]
reporter/tests/test_database.py::test_seed_initial_plans PASSED          [  7%]
reporter/tests/test_database_manager.py::test_add_member_successful PASSED [  9%]
reporter/tests/test_database_manager.py::test_add_member_duplicate_phone PASSED [ 10%]
reporter/tests/test_database_manager.py::test_get_all_members_empty PASSED [ 12%]
reporter/tests/test_database_manager.py::test_get_all_members_multiple PASSED [ 13%]
reporter/tests/test_database_manager.py::test_get_all_members_filter_by_name PASSED [ 15%]
reporter/tests/test_database_manager.py::test_get_all_members_filter_by_phone PASSED [ 16%]
reporter/tests/test_database_manager.py::test_get_all_members_filter_by_name_and_phone PASSED [ 18%]
reporter/tests/test_database_manager.py::test_get_all_plans PASSED       [ 20%]
reporter/tests/test_database_manager.py::test_get_all_plans_no_plans PASSED [ 21%]
reporter/tests/test_database_manager.py::test_get_all_plans_with_inactive_no_plans PASSED [ 23%]
reporter/tests/test_database_manager.py::test_get_all_plans_with_inactive_only_active PASSED [ 24%]
reporter/tests/test_database_manager.py::test_get_all_plans_with_inactive_only_inactive PASSED [ 26%]
reporter/tests/test_database_manager.py::test_get_all_plans_with_inactive_mixed PASSED [ 27%]
reporter/tests/test_database_manager.py::test_get_plan_by_name_and_duration_exists PASSED [ 29%]
reporter/tests/test_database_manager.py::test_get_plan_by_name_and_duration_not_exists PASSED [ 30%]
reporter/tests/test_database_manager.py::test_get_plan_by_name_and_duration_wrong_duration PASSED [ 32%]
reporter/tests/test_database_manager.py::test_get_or_create_plan_id_get_existing PASSED [ 33%]
reporter/tests/test_database_manager.py::test_get_or_create_plan_id_create_new PASSED [ 35%]
reporter/tests/test_database_manager.py::test_add_transaction_group_class PASSED [ 36%]
reporter/tests/test_database_manager.py::test_get_memberships_for_member_none PASSED [ 38%]
reporter/tests/test_database_manager.py::test_add_transaction_group_class_invalid_plan_id PASSED [ 40%]
reporter/tests/test_database_manager.py::test_add_transaction_personal_training PASSED [ 41%]
reporter/tests/test_database_manager.py::test_get_all_activity_for_member PASSED [ 43%]
reporter/tests/test_database_manager.py::test_get_pending_renewals PASSED [ 44%]
reporter/tests/test_database_manager.py::test_get_pending_renewals_none_when_no_relevant_data PASSED [ 46%]
reporter/tests/test_database_manager.py::test_get_finance_report PASSED  [ 47%]
reporter/tests/test_database_manager.py::test_get_finance_report_no_transactions PASSED [ 49%]
reporter/tests/test_database_manager.py::test_get_finance_report_with_pt_bookings PASSED [ 50%]
reporter/tests/test_database_manager.py::test_join_date_standardization_new_member_then_group_membership PASSED [ 52%]
reporter/tests/test_database_manager.py::test_join_date_standardization_new_member_then_pt_booking PASSED [ 53%]
reporter/tests/test_database_manager.py::test_join_date_standardization_existing_member_earlier_activity PASSED [ 55%]
reporter/tests/test_database_manager.py::test_join_date_standardization_existing_member_later_activity PASSED [ 56%]
reporter/tests/test_database_manager.py::test_deactivate_member PASSED   [ 58%]
reporter/tests/test_database_manager.py::test_delete_transaction PASSED  [ 60%]
reporter/tests/test_database_manager.py::test_delete_plan PASSED         [ 61%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_no_filters PASSED [ 63%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_name_filter PASSED [ 64%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_phone_filter PASSED [ 66%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_join_date_filter PASSED [ 67%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_combined_filters PASSED [ 69%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_invalid_date_format_filter PASSED [ 70%]
reporter/tests/test_database_manager.py::test_get_transactions_with_member_details_no_results PASSED [ 72%]
reporter/tests/test_database_manager.py::test_get_book_status_non_existent PASSED [ 73%]
reporter/tests/test_database_manager.py::test_set_and_get_book_status_closed PASSED [ 75%]
reporter/tests/test_database_manager.py::test_set_and_get_book_status_open PASSED [ 76%]
reporter/tests/test_database_manager.py::test_set_book_status_update_existing PASSED [ 78%]
reporter/tests/test_database_manager.py::test_add_transaction_when_books_closed PASSED [ 80%]
reporter/tests/test_database_manager.py::test_delete_transaction_when_books_closed PASSED [ 81%]
reporter/tests/test_database_manager.py::test_add_transaction_when_books_open PASSED [ 83%]
reporter/tests/test_database_manager.py::test_delete_transaction_when_books_open PASSED [ 84%]
reporter/tests/test_gui_flows.py::test_add_member_flow PASSED            [ 86%]
reporter/tests/test_gui_flows.py::test_plan_management_flow PASSED       [ 87%]
reporter/tests/test_gui_flows.py::test_add_membership_flow PASSED        [ 89%]
reporter/tests/test_gui_flows.py::test_deactivate_member_action_flow PASSED [ 90%]
reporter/tests/test_gui_flows.py::test_delete_transaction_action_flow PASSED [ 92%]
reporter/tests/test_gui_flows.py::test_delete_plan_action_flow PASSED    [ 93%]
reporter/tests/test_gui_flows.py::test_generate_custom_pending_renewals_action_flow PASSED [ 95%]
reporter/tests/test_gui_flows.py::test_generate_finance_report_excel_action_flow PASSED [ 96%]
reporter/tests/test_migrate_data.py::test_migration_clears_tables PASSED [ 98%]
reporter/tests/test_migrate_data.py::test_end_date_calculation_and_record_processing PASSED [100%]

============================== 65 passed in 3.50s ==============================
Pytest execution finished.

--- Running UI Flow Simulation Tests ---

--- Running simulation: reporter/simulations/simulate_add_gm_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_add_gm.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_add_gm.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_add_gm.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_add_gm.db
--- Setting up Prerequisites ---
Prerequisite: Member 'UI Test User Valid GM' not found. Adding new one.
Prerequisite controller (add member) message: Member added successfully.
Prerequisite: Added and using new member 'UI Test User Valid GM' with ID 1.
Prerequisite: Plan 'Test Auto Plan GM' not found. Adding new one.
Prerequisite controller (add plan) message: Plan added successfully.
Prerequisite: Added and using new plan 'Test Auto Plan GM' with ID 4.

--- Part 1: Valid Group Membership Data Simulation ---
Attempting to add valid GM: MemberID=1, PlanID=4, PayDate='2025-06-10', StartDate='2025-06-10', Amount='100.0', Method='Cash UI Sim GM'
Controller action message: Group Class membership added successfully!
SUCCESS (Part 1): controller.save_membership_action returned success.
SUCCESS (Part 1): Verified GM in member activity - TransID: 1, Plan Name: Test Auto Plan GM, Details: ('Group Class', 'Test Auto Plan GM', '2025-06-10', '2025-06-10', '2025-07-10', 100.0, 'Cash UI Sim GM', 1)

--- Part 2: Invalid Group Membership Data Simulation (Non-Positive Amount) ---
Attempting GM with non-positive amount: Amount='0.0'
Controller action message: Error: Amount Paid must be a positive number.
SUCCESS (Part 2): controller.save_membership_action correctly prevented GM with non-positive amount.
SUCCESS (Part 2): Correct error message received.
--- Main: Restored DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_add_gm_flow.py completed.

--- Running simulation: reporter/simulations/simulate_add_member_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data.db
--- Part 1: Valid Data Simulation ---
Attempting to add valid member: Name='UI Ctrl Test User Valid', Phone='9876504240'
Controller action message: Member added successfully.
SUCCESS (Part 1): controller.save_member_action returned success.
SUCCESS (Part 1): Verified member in DB - ID: 1, Name: UI Ctrl Test User Valid, Phone: 9876504240

--- Part 2: Invalid Data Simulation (Empty Name) ---
Attempting to add member with empty name: Name='', Phone='9876404240'
Controller action message: Error: Name and Phone cannot be empty.
SUCCESS (Part 2): controller.save_member_action correctly prevented adding member with empty name.
SUCCESS (Part 2): Correct error message for empty name received.
--- Main: Restored DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_add_member_flow.py completed.

--- Running simulation: reporter/simulations/simulate_book_closing_flow.py ---
Failed: Books for month 2030-08 are closed.
--- Setting up simulation environment ---
Simulation Database: /app/reporter/simulations/sim_data/simulation_kranos_data_book_closing.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_book_closing.db' created and tables ensured.
Seeded 3 initial plans.
Seeded initial plans into /app/reporter/simulations/sim_data/simulation_kranos_data_book_closing.db
Simulation database created, initialized, and seeded at /app/reporter/simulations/sim_data/simulation_kranos_data_book_closing.db
Database manager is now using: /app/reporter/simulations/sim_data/simulation_kranos_data_book_closing.db

--- Starting Book Closing Flow Simulation ---

Step 1: Adding test member and fetching plan...
Test member 'Sim Member BookClose' added: Member added successfully.
Test member ID: 1
Using plan ID: 2

Step 2: Adding initial transaction to month 2030-08...
Ensured book status for 2030-08 is 'open' before first transaction.
Initial transaction added: Group Class membership added successfully!

Step 3: Closing books for month 2030-08...
Books closed action: Books for 2030-08 closed successfully.
Status check: Status for 2030-08: CLOSED

Step 4: Attempting to add transaction to 2030-08 (now closed)...
Attempt to add to closed month - Success: False, Message: Cannot add transaction. Books for 2030-08 are closed.

Step 5: Re-opening books for month 2030-08...
Books re-opened action: Books for 2030-08 re-opened successfully.
Status check: Status for 2030-08: OPEN

Step 6: Attempting to add transaction to 2030-08 (now open)...
Transaction added to re-opened month: Group Class membership added successfully!

--- Book Closing Flow Simulation Completed Successfully ---

--- Simulation cleanup ---
Restored database_manager.DB_FILE to: reporter/data/kranos_data.db
--- Simulation script finished ---
Simulation reporter/simulations/simulate_book_closing_flow.py completed.

--- Running simulation: reporter/simulations/simulate_deactivate_member_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_member.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_member.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_del_member.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_member.db

--- Starting Simulation: Deactivate Member Flow ---

Step 1: Adding test member: Name='MemberToDelete_242', Phone='DEL44242'
Member added successfully. ID: 1

Step 2: Adding a transaction for member ID 1
Transaction added for member ID 1.
Found 1 transaction(s) for the member before deactivation.

Step 3: Calling controller.deactivate_member_action for member ID 1
Controller action message: 'Member deactivated successfully.' (Success: True)

Step 4: Verifying member deactivation...
SUCCESS: Member 'MemberToDelete_242' (ID: 1) correctly marked as inactive (not found by get_all_members).

Step 5: Verifying member's transactions are preserved after deactivation...
SUCCESS: Transactions for member ID 1 correctly persisted after deactivation (1 found).

--- Simulation: Deactivate Member Flow Complete ---
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_deactivate_member_flow.py completed.

--- Running simulation: reporter/simulations/simulate_delete_plan_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_delete_plan.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_delete_plan.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_delete_plan.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_delete_plan.db

--- Starting Simulation: Delete Plan Flow ---

--- Scenario 1: Delete Unused Plan ---
Step 1.1: Adding an unused plan: Name='SimDelPlan_Unused_242', Duration=10 days
Unused plan added successfully. ID: 4

Step 1.2: Calling controller.delete_plan_action for unused plan ID 4
Controller action message (S1): 'Plan deleted successfully.' (Success: True)

Step 1.3: Verifying unused plan is deleted...
SUCCESS (S1): Unused plan ID 4 correctly deleted.

--- Scenario 2: Attempt to Delete Used Plan ---
Step 2.1: Adding a plan to be used: Name='SimDelPlan_Used_242', Duration=30 days
Plan to be used added successfully. ID: 5

Step 2.2: Adding member 'PlanUser_242' and transaction using plan ID 5
Member and transaction using plan ID 5 added.

Step 2.3: Calling controller.delete_plan_action for used plan ID 5
Controller action message (S2): 'Plan is in use and cannot be deleted.' (Success: False)

Step 2.4: Verifying used plan is NOT deleted...
SUCCESS (S2): Used plan ID 5 was NOT deleted, and correct message received.

--- Simulation: Delete Plan Flow Complete ---
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_delete_plan_flow.py completed.

--- Running simulation: reporter/simulations/simulate_delete_transaction_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_trans.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_trans.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_del_trans.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_del_trans.db

--- Starting Simulation: Delete Transaction Flow ---

Step 1: Adding test member: Name='TxDeleteUser_243', Phone='TDEL44243'
Member added successfully. ID: 1

Step 2: Adding two transactions for member ID 1
Transaction 1 added.
Transaction 2 added.
Transaction to delete ID: 1 (Amount: 60.0)
Other transaction ID: 2 (Amount: 200.0)

Step 3: Calling controller.delete_transaction_action for transaction ID 1
Controller action message: 'Transaction deleted successfully.' (Success: True)

Step 4: Verifying transaction deletion...
SUCCESS: Transaction ID 1 correctly deleted.

Step 5: Verifying other transaction still exists...
SUCCESS: Other transaction (ID: 2) still exists for member 1.
Correct number of transactions (1) remaining.

Step 6: Verifying member still exists...
SUCCESS: Member 'TxDeleteUser_243' (ID: 1) still exists.

--- Simulation: Delete Transaction Flow Complete ---
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_delete_transaction_flow.py completed.

--- Running simulation: reporter/simulations/simulate_manage_plans_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_manage_plans.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_manage_plans.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_manage_plans.db' created and tables ensured.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_manage_plans.db
--- Part 1: Add New Plan (Valid Data) ---
Attempting to add valid plan: Name='UI Ctrl Gold Plan 4244', Duration=30 days
Controller action message: Plan added successfully.
SUCCESS (Part 1): controller.save_plan_action returned success.
SUCCESS (Part 1): Verified plan in returned list. ID: 4, Details: (4, 'UI Ctrl Gold Plan 4244', 30, 1)

--- Part 2: Edit Plan (Valid Data) ---
Attempting to edit Plan ID 4: New Name='UI Ctrl Gold Updated 4244', New Duration=35 days
Controller action message: Plan updated successfully.
SUCCESS (Part 2): controller.save_plan_action (for update) returned success for Plan ID 4.
SUCCESS (Part 2): Verified plan update in returned list. Details: (4, 'UI Ctrl Gold Updated 4244', 35, 1)

--- Part 3: Deactivate Plan ---
Attempting to deactivate Plan ID 4
Controller action message: Plan status updated successfully.
SUCCESS (Part 3): controller.toggle_plan_status_action returned success for Plan ID 4.
SUCCESS (Part 3): Verified plan deactivation in returned list. is_active=0. Details: (4, 'UI Ctrl Gold Updated 4244', 35, 0)

--- Part 4: Add New Plan (Invalid Data - Empty Name) ---
Attempting to add plan with empty name: Name='', Duration=30 days
Controller action message: Error: Plan Name and Duration cannot be empty.
SUCCESS (Part 4): controller.save_plan_action correctly prevented adding plan with empty name.
SUCCESS (Part 4): Correct error message received.

--- Part 5: Add New Plan (Invalid Data - Non-positive Duration) ---
Attempting to add plan with non-positive duration: Name='UI Ctrl Invalid Duration Plan 4244', Duration=0 days
Controller action message: Error: Duration must be a positive integer.
SUCCESS (Part 5): controller.save_plan_action correctly prevented adding plan with non-positive duration.
SUCCESS (Part 5): Correct error message received.
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_manage_plans_flow.py completed.

--- Running simulation: reporter/simulations/simulate_report_custom_renewals_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_renewals.db ---
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_renewals.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_renewals.db' created and tables ensured.
Cleared previous simulation-specific data (transactions, relevant members, plans).
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_renewals.db

--- Starting Simulation: Custom Pending Renewals Report Flow ---

Step 1: Setting up data for future renewals...
Added member 'SimRenewUser_245' (ID: 1) and plan 'SimRenewPlan_30Day_245' (ID: 4).
Added transaction for member SimRenewUser_245 with end date 2025-08-15.

Step 2: Generating custom pending renewals report for 8/2025...
Controller action message: 'Found 1 pending renewals for August 2025.' (Success: True)
Renewals Data Found:
  - ('SimRenewUser_245', 'SRU44245', 'SimRenewPlan_30Day_245', '2025-08-15')
SUCCESS: Expected member 'SimRenewUser_245' found in renewals report for 8/2025.

Step 3: Generating report for a date range with no expected renewals...
Controller action message (no renewals): 'No pending renewals found for January 2030.' (Success: True)
SUCCESS: Correctly found no renewals for 1/2030 and appropriate message received.
Appropriate 'no renewals' message confirmed.

--- Simulation: Custom Pending Renewals Report Flow Complete ---
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_report_custom_renewals_flow.py completed.

--- Running simulation: reporter/simulations/simulate_report_finance_excel_flow.py ---
--- Main: Setting up simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_finance.db ---
Simulation output directory: /app/reporter/simulations/output
Deleted existing simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_finance.db
Database '/app/reporter/simulations/sim_data/simulation_kranos_data_finance.db' created and tables ensured.
Cleared previous SimFinance transactions.
Seeded 3 initial plans.
Recreated and seeded simulation DB: /app/reporter/simulations/sim_data/simulation_kranos_data_finance.db

--- Starting Simulation: Finance Report Excel Flow ---

Step 1: Adding transaction data for 6/2025...
Transaction data added.
Expected total revenue for 6/2025 should be: 351.25

Step 2: Report will be saved to: /app/reporter/simulations/output/sim_finance_report_2025_6.xlsx

Step 3: Calling controller.generate_finance_report_excel_action for 6/2025...
Controller action message: 'Finance report generated successfully: /app/reporter/simulations/output/sim_finance_report_2025_6.xlsx' (Success: True)

Step 4: Verifying Excel file creation...
SUCCESS: Excel report file created at '/app/reporter/simulations/output/sim_finance_report_2025_6.xlsx'.

Step 5: Simulating user cancelling save dialog...
Controller action message (cancel scenario): 'An error occurred during report generation: [Errno 2] No such file or directory: ''' (Success: False)
SUCCESS (Cancel Scenario): Correctly handled empty save path as an error.

--- Simulation: Finance Report Excel Flow Complete ---
--- Main: Restored database_manager.DB_FILE to: reporter/data/kranos_data.db ---
Simulation reporter/simulations/simulate_report_finance_excel_flow.py completed.

--- Test Execution Summary ---
All tests and simulations passed successfully.
Test execution complete. See test_results.log for details.
